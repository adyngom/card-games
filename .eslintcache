[{"/Users/techlabs28/Code/React/card-games/src/index.js":"1","/Users/techlabs28/Code/React/card-games/src/reportWebVitals.js":"2","/Users/techlabs28/Code/React/card-games/src/App.js":"3","/Users/techlabs28/Code/React/card-games/src/memory/Memory.js":"4","/Users/techlabs28/Code/React/card-games/src/components/index.js":"5","/Users/techlabs28/Code/React/card-games/src/components/flip-card.js":"6","/Users/techlabs28/Code/React/card-games/src/memory/memory-game.js":"7","/Users/techlabs28/Code/React/card-games/src/utils/shuffle.js":"8"},{"size":500,"mtime":1607903258846,"results":"9","hashOfConfig":"10"},{"size":364,"mtime":1607903481047,"results":"11","hashOfConfig":"10"},{"size":106,"mtime":1607921648868,"results":"12","hashOfConfig":"10"},{"size":2179,"mtime":1607928898978,"results":"13","hashOfConfig":"10"},{"size":29,"mtime":1607903060409,"results":"14","hashOfConfig":"10"},{"size":702,"mtime":1607932516990,"results":"15","hashOfConfig":"10"},{"size":1515,"mtime":1607924831011,"results":"16","hashOfConfig":"10"},{"size":295,"mtime":1607903451053,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"kdidzh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/techlabs28/Code/React/card-games/src/index.js",[],["36","37"],"/Users/techlabs28/Code/React/card-games/src/reportWebVitals.js",[],"/Users/techlabs28/Code/React/card-games/src/App.js",[],"/Users/techlabs28/Code/React/card-games/src/memory/Memory.js",["38","39","40"],"import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport \"./memory.css\";\nimport { MemoryGame } from \"./memory-game\";\nimport { FlipCard } from \"../components\";\n\nconst Memory = ({ children, level = 1 }) => {\n  const [gameDeck, setGameDeck] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [matchesStack, setMatchesStack] = useState([]);\n\n  const refContainer = useRef();\n\n  const getGameDeck = async () => {\n    const newGameDeck = await MemoryGame.init(level);\n    setGameDeck([...newGameDeck]);\n  };\n\n  const addCardToStack = (elem) => {\n    setMatchesStack([...matchesStack, elem]);\n  };\n\n  const checkCardsMatch = (container) => {\n    const [card_one, card_two] = matchesStack;\n    setTimeout(() => {\n      if (card_one.dataset.type === card_two.dataset.type) {\n        card_one.classList.add(\"freeze\", \"flipped\");\n        card_two.classList.add(\"freeze\", \"flipped\");\n      } else {\n        card_one.classList.remove(\"flip\");\n        card_two.classList.remove(\"flip\");\n      }\n      setMatchesStack([]);\n      container.classList.remove(\"freeze\");\n    }, 1000);\n  };\n\n  const flipStack = (evt) => {\n    evt.stopPropagation();\n    const elem = evt.target;\n    if (elem.classList.contains(\"card\")) {\n      elem.classList.toggle(\"flip\");\n      addCardToStack(elem);\n    }\n  };\n\n  useEffect(() => {\n    getGameDeck();\n    setIsLoading((t) => !t);\n  }, []);\n\n  useEffect(() => {\n    const { current: container } = refContainer;\n    if (matchesStack.length === 2) {\n      container.classList.add(\"freeze\");\n      checkCardsMatch(container);\n    }\n  }, [matchesStack.length]);\n\n  return (\n    <Fragment>\n      <div id=\"memory\" onClick={flipStack} ref={refContainer}>\n        <header>\n          <h1>Memory Game</h1>\n        </header>\n        <div className=\"wrapper\">\n          {gameDeck.map((face, idx) => {\n            return (\n              <FlipCard key={idx} type={face}>\n                <span>{face}</span>\n              </FlipCard>\n            );\n          })}\n        </div>\n        <footer>\n          <small>Click refresh to start a new game</small>\n        </footer>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Memory;\n","/Users/techlabs28/Code/React/card-games/src/components/index.js",[],"/Users/techlabs28/Code/React/card-games/src/components/flip-card.js",[],"/Users/techlabs28/Code/React/card-games/src/memory/memory-game.js",[],"/Users/techlabs28/Code/React/card-games/src/utils/shuffle.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":8,"column":10,"nodeType":"47","messageId":"48","endLine":8,"endColumn":19},{"ruleId":"49","severity":1,"message":"50","line":49,"column":6,"nodeType":"51","endLine":49,"endColumn":8,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":57,"column":6,"nodeType":"51","endLine":57,"endColumn":27,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGameDeck'. Either include it or remove the dependency array.","ArrayExpression",["57"],"React Hook useEffect has a missing dependency: 'checkCardsMatch'. Either include it or remove the dependency array.",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [getGameDeck]",{"range":"63","text":"64"},"Update the dependencies array to be: [checkCardsMatch, matchesStack.length]",{"range":"65","text":"66"},[1397,1399],"[getGameDeck]",[1595,1616],"[checkCardsMatch, matchesStack.length]"]